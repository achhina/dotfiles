#!/usr/bin/env bash
set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables
STASH_NAME="update-script-$(date +%s)"
STASHED=false
FLAKE_DIR="$HOME/.config/nix"

run_cmd() {
  echo -e "${BLUE}→${NC} $*"
  "$@"
}

log_info() {
  echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
  echo -e "${GREEN}✅${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
  echo -e "${RED}❌${NC} $1"
}

cleanup_on_error() {
  log_error "Update failed! Cleaning up..."
  if [ "$STASHED" = true ]; then
    log_info "Restoring stashed changes..."
    git stash pop "stash@{0}" 2>/dev/null || log_warning "Could not restore stash automatically. Check 'git stash list'"
  fi
  exit 1
}

# Set up error handling
trap cleanup_on_error ERR

check_git_repo() {
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_error "Not in a git repository"
    exit 1
  fi
}

stash_changes() {
  # Check if there are any changes to stash
  if ! git diff-index --quiet HEAD -- 2>/dev/null || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    log_info "Stashing current changes..."
    git stash push -u -m "$STASH_NAME" >/dev/null
    STASHED=true
    log_success "Changes stashed successfully"
  else
    log_info "No changes to stash"
  fi
}

restore_stash() {
  if [ "$STASHED" = true ]; then
    log_info "Restoring stashed changes..."
    if git stash pop "stash@{0}" >/dev/null 2>&1; then
      log_success "Stashed changes restored successfully"
    else
      log_warning "Could not restore stash automatically - there may be conflicts"
      log_info "Check 'git stash list' and manually resolve if needed"
    fi
  fi
}

commit_flake_lock() {
  cd "$FLAKE_DIR"
  
  # Check if flake.lock actually changed
  if git diff-index --quiet HEAD -- flake.lock 2>/dev/null; then
    log_info "No changes to flake.lock - skipping commit"
    return 0
  fi
  
  log_info "Committing flake.lock updates..."
  git add flake.lock
  
  # Get list of updated inputs for commit message
  local updated_inputs=$(git diff HEAD~1 flake.lock | grep '"lastModified"' | wc -l 2>/dev/null || echo "unknown")
  
  git commit -m "Update flake inputs

- Updated $updated_inputs dependency inputs
- Generated by update script on $(date '+%Y-%m-%d %H:%M:%S')" >/dev/null
  
  log_success "Flake lock committed successfully"
}

main() {
  echo -e "${GREEN}🔄 Starting system update...${NC}"
  
  # Ensure we're in a git repository
  check_git_repo
  
  # Change to config directory
  cd "$HOME/.config"
  
  # Stash any existing changes
  stash_changes
  
  # Update nix channels
  log_info "Updating nix channels..."
  run_cmd nix-channel --update
  
  # Update flake inputs
  log_info "Updating flake inputs..."
  run_cmd nix flake update --flake "$FLAKE_DIR"
  
  # Commit flake.lock changes if any
  commit_flake_lock
  
  # Apply home-manager configuration
  log_info "Applying home-manager configuration..."
  run_cmd home-manager switch --flake "$FLAKE_DIR#default"
  
  # Restore any stashed changes
  restore_stash
  
  log_success "System update completed successfully!"
}

# Run main function
main "$@"