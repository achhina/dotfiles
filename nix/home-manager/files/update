#!/usr/bin/env bash
set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables
STASH_NAME="update-script-$(date +%s)"
STASHED=false
FLAKE_DIR="$HOME/.config/nix"

run_cmd() {
  echo -e "${BLUE}→${NC} $*"
  "$@"
}

log_info() {
  echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
  echo -e "${GREEN}✅${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
  echo -e "${RED}❌${NC} $1"
}

cleanup_on_error() {
  log_error "Update failed! Cleaning up..."
  if [ "$STASHED" = true ]; then
    log_info "Restoring stashed changes..."
    git stash pop "stash@{0}" 2>/dev/null || log_warning "Could not restore stash automatically. Check 'git stash list'"
  fi
  exit 1
}

# Set up error handling
trap cleanup_on_error ERR

check_git_repo() {
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_error "Not in a git repository"
    exit 1
  fi
}

stash_changes() {
  # Check if there are any changes to stash
  if ! git diff-index --quiet HEAD -- 2>/dev/null || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    log_info "Stashing current changes..."
    git stash push -u -m "$STASH_NAME" >/dev/null
    STASHED=true
    log_success "Changes stashed successfully"
  else
    log_info "No changes to stash"
  fi
}

restore_stash() {
  if [ "$STASHED" = true ]; then
    log_info "Restoring stashed changes..."
    if git stash pop "stash@{0}" >/dev/null 2>&1; then
      log_success "Stashed changes restored successfully"
    else
      log_warning "Could not restore stash automatically - there may be conflicts"
      log_info "Check 'git stash list' and manually resolve if needed"
    fi
  fi
}

commit_flake_lock() {
  cd "$FLAKE_DIR"

  # Check if flake.lock actually changed
  if git diff-index --quiet HEAD -- flake.lock 2>/dev/null; then
    log_info "No changes to flake.lock - skipping commit"
    return 0
  fi

  log_info "Generating update summary..."

  # Get detailed information about updated packages
  local update_summary
  update_summary=$(generate_update_summary)

  log_info "Committing flake.lock updates..."
  git add flake.lock

  git commit -m "Update flake inputs

$update_summary

Generated by update script on $(date '+%Y-%m-%d %H:%M:%S')" >/dev/null

  log_success "Flake lock committed successfully"
}

generate_update_summary() {
  # Get package version changes using nix profile diff-closures
  log_info "Analyzing package version changes..."

  local version_changes
  version_changes=$(get_package_version_changes)

  if [ -n "$version_changes" ]; then
    echo "Package version changes:"
    echo "$version_changes"
  else
    echo "- No package version changes detected"
  fi

  # Also include flake input summary
  local input_summary
  input_summary=$(get_flake_input_summary)

  if [ -n "$input_summary" ]; then
    echo ""
    echo "$input_summary"
  fi
}

get_package_version_changes() {
  # Use nix profile diff-closures to get actual package version changes
  local profile_path="$HOME/.local/state/nix/profiles/home-manager"

  if [ ! -e "$profile_path" ]; then
    return
  fi

  # Get the diff between the current and previous generation
  nix profile diff-closures --profile "$profile_path" 2>/dev/null
}

get_flake_input_summary() {
  local lock_diff
  lock_diff=$(git diff HEAD~1 flake.lock 2>/dev/null || echo "")

  if [ -z "$lock_diff" ]; then
    return
  fi

  # Count updated inputs
  local updated_count
  updated_count=$(echo "$lock_diff" | grep -c '"lastModified"' 2>/dev/null || echo "0")

  # Extract input names that changed
  local changed_inputs
  changed_inputs=$(echo "$lock_diff" | grep -B5 '"lastModified"' | grep -E '"[a-zA-Z0-9_-]+": \{' | sed 's/.*"\([^"]*\)": {.*/\1/' | sort -u)

  echo "Updated $updated_count flake inputs:"
  if [ -n "$changed_inputs" ]; then
    echo "$changed_inputs" | sed 's/^/- /'
  fi
}

main() {
  echo -e "${GREEN}🔄 Starting system update...${NC}"

  # Ensure we're in a git repository
  check_git_repo

  # Change to config directory
  cd "$HOME/.config"

  # Stash any existing changes
  stash_changes

  # Update flake inputs
  log_info "Updating flake inputs..."
  run_cmd nix flake update --flake "$FLAKE_DIR"

  # Commit flake.lock changes if any and check if there were changes
  local lock_changed=false
  if ! git diff-index --quiet HEAD -- "$FLAKE_DIR/flake.lock" 2>/dev/null; then
    commit_flake_lock
    lock_changed=true
  else
    log_info "No flake.lock changes - inputs are already up to date"
  fi

  # Only apply home-manager if flake.lock changed or if there are local config changes
  if [ "$lock_changed" = true ] || ! git diff-index --quiet HEAD -- 2>/dev/null; then
    log_info "Applying home-manager configuration..."
    run_cmd home-manager switch --flake "$FLAKE_DIR#default"
  else
    log_info "Skipping home-manager switch - no changes detected"
  fi

  # Restore any stashed changes
  restore_stash

  log_success "System update completed successfully!"
}

# Run main function
main "$@"
